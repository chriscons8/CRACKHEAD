# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import math
from io import StringIO


from PyQt5 import QtCore, QtGui, QtWidgets
import sys, res

from PyQt5.QtWidgets import QApplication, QLabel, QPushButton, QVBoxLayout, QWidget, QFileDialog, QGridLayout
from PyQt5.QtGui import QPixmap
from PyQt5.QtGui import QCursor

from PyQt5.QtWidgets import * 
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 
from PyQt5.QtWidgets import QDesktopWidget


from PyQt5.QtWidgets import QMainWindow, QLabel
from PyQt5.QtWidgets import QGridLayout, QWidget, QDesktopWidget

from decimal import Decimal
import time
import random

minCalories = 0
maxCalories = 0
minWorkout = 0
maxWorkout = 0
minSleep = 0
maxSleep = 0
days = 0

userSIGNUP = ""
passSIGNUP = ""
emailSIGNUP = "" 
userLOGIN = ""
passLOGIN = ""

NameEntry = ""
LNameEntry = ""
AgeEntry = ""
WorkEntry = ""
SleepEntry = ""
CalEntry =  ""

text = ""
credentials = 0;
widgets = {
    "logo": [],
    "button": [],
    "demo": [],

    "goals": [],
    "years": [],
    "calorie": [],
    "work": [],
    "sleep": [],
    "yearsInput": [],
    "workInput": [],
    "calorieInput": [],
    "sleepInput": [],
    "demo2": [],



    "temp":[],

#frame 3 grid
    "Simulation":[],
    "daysGenerated":[],
    "minmaxCal":[],
    "minmaxWork":[],
    "minmaxSleep":[],

    "maxCal":[],
    "maxSleep":[],
    "maxWork":[],
    "daysGenValue":[],

    "minElapsedCalculated":[],
    "maxElapsedCalculated":[],
    "generateElapsed":[],
    "max2ElapsedCalculated":[],
    "backButton":[],

    "backButton2":[],
    "buildHeapButton":[],



}


widgets2 = {
    
}


#import res

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(450, 550)
        self.widget = QtWidgets.QWidget(Form)
        Form.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        Form.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.widget.setGeometry(QtCore.QRect(30, 30, 370, 480))
        self.widget.setStyleSheet("QPushButton#pushButton{    \n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(20, 47, 78, 219), stop:1 rgba(85, 98, 112, 226));\n"
"    color:rgba(255, 255, 255, 210);\n"
"    border-radius:5px;\n"
"}\n"
"QPushButton#pushButton:hover{    \n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(40, 67, 98, 219), stop:1 rgba(105, 118, 132, 226));\n"
"}\n"
"QPushButton#pushButton:pressed{    \n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    background-color:rgba(105, 118, 132, 200);\n"
"}\n"
"\n"
"QPushButton#pushButton_2, #pushButton_3, #pushButton_4, #pushButton_5{    \n"
"    background-color: rgba(0, 0, 0, 0);\n"
"    color:rgba(85, 98, 112, 255);\n"
"}\n"
"QPushButton#pushButton_2:hover, #pushButton_3:hover, #pushButton_4:hover, #pushButton_5:hover{    \n"
"    color:rgba(155, 168, 182, 220);\n"
"}\n"
"QPushButton#pushButton_2:pressed, #pushButton_3:pressed, #pushButton_4:pressed, #pushButton_5:pressed{    \n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115, 128, 142, 255);\n"
"}")
        self.widget.setObjectName("widget")
        self.mtnBack = QtWidgets.QLabel(self.widget)
        self.mtnBack.setGeometry(QtCore.QRect(30, 20, 341, 461))
        self.mtnBack.setStyleSheet("border-image: url(:/images/background.png);\n"
"border-radius:20px;")
        self.mtnBack.setText("")
        self.mtnBack.setObjectName("mtnBack")
        self.BackLayer = QtWidgets.QLabel(self.widget)
        self.BackLayer.setGeometry(QtCore.QRect(30, 20, 350, 500))
        self.BackLayer.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:0.715909, stop:0 rgba(0, 0, 0, 9), stop:0.375 rgba(0, 0, 0, 50), stop:0.835227 rgba(0, 0, 0, 75));\n"
"border-radius:20px;")
        self.BackLayer.setText("")
        self.BackLayer.setObjectName("BackLayer")
        self.LogInLayer = QtWidgets.QLabel(self.widget)
        self.LogInLayer.setGeometry(QtCore.QRect(40, 30, 321, 441))
        self.LogInLayer.setStyleSheet("background-color:rgba(0, 0, 0, 100);\n"
"border-radius:15px;")
        self.LogInLayer.setText("")
        self.LogInLayer.setObjectName("LogInLayer")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(90, 80, 261, 51))
        font = QtGui.QFont()
        font.setFamily("Cambria")
        font.setPointSize(23)
        font.setBold(False)
        font.setItalic(True)
        self.label.setFont(font)
        self.label.setStyleSheet("color:rgba(255, 255, 255, 210);")
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setGeometry(QtCore.QRect(80, 165, 241, 50))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(105, 118, 132, 255);\n"
"color:rgba(255, 255, 255, 230);\n"
"padding-bottom:7px;")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_2.setGeometry(QtCore.QRect(80, 230, 241, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(105, 118, 132, 255);\n"
"color:rgba(255, 255, 255, 230);\n"
"padding-bottom:7px;")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setGeometry(QtCore.QRect(100, 310, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(14)
        font.setBold(True)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")


        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setGeometry(QtCore.QRect(180, 360, 61, 21))
        self.label_5.setStyleSheet("color:rgba(255, 255, 255, 140);")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.widget)
        self.label_6.setGeometry(QtCore.QRect(110, 110, 261, 51))
        font = QtGui.QFont()
        font.setFamily("Cambria")
        font.setPointSize(23)
        font.setBold(False)
        font.setItalic(True)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color:rgba(255, 255, 255, 210);")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.widget)
        self.label_7.setGeometry(QtCore.QRect(100, 280, 211, 21))
        self.label_7.setStyleSheet("color:rgb(255, 0, 0)")
        self.label_7.setObjectName("label_7")
        self.label_7.hide()




        qtRectangle = Form.frameGeometry()
        centerPoint = QDesktopWidget().availableGeometry().center()
        qtRectangle.moveCenter(centerPoint)
        Form.move(qtRectangle.topLeft())


        self.retranslateUiFORM(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


    def retranslateUiFORM(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "LIFETRACKER "))
        self.lineEdit.setPlaceholderText(_translate("Form", "  User Name"))
        self.lineEdit_2.setPlaceholderText(_translate("Form", "  Password"))
        self.pushButton.setText(_translate("Form", "LOG IN"))
        self.label_5.setText(_translate("Form", "Sign Up"))
        self.label_6.setText(_translate("Form", "ALL IN ONE"))
        self.label_7.setText(_translate("Form", "Incorrect Username/ Password"))


        self.pushButton.clicked.connect(self.on_click)
        self.label_5.mousePressEvent = self.on_click_signup

    def on_click(self):
        global userLOGIN
        global passLOGIN
        userLOGIN = self.lineEdit.text()
        passLOGIN = self.lineEdit_2.text()
        print(userLOGIN)
        accessDB()
        print(credentials)
        if credentials == 1:
            self.label_7.show()
            #time.sleep(1)
            #self.label_7.hide()
        else:
            self.label_7.hide()            

        # if credentials == 1:
        #     self.label_7.show()
        #     time.sleep(1)
        #     self.label_7.hide()
        #Signup.show()

    def on_click_signup(self,eve):
        Form.hide()
        Signup.show()





class Ui_Signup(object):
    def setupUi(self, Signup):
        Signup.setObjectName("Signup")
        Signup.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        Signup.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.widget = QtWidgets.QWidget(Signup)
        self.widget.setGeometry(QtCore.QRect(30, 30, 370, 480))
        self.widget.setStyleSheet("QPushButton#pushButton{    \n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(20, 47, 78, 219), stop:1 rgba(85, 98, 112, 226));\n"
"    color:rgba(255, 255, 255, 210);\n"
"    border-radius:5px;\n"
"}\n"
"QPushButton#pushButton:hover{    \n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(40, 67, 98, 219), stop:1 rgba(105, 118, 132, 226));\n"
"}\n"
"QPushButton#pushButton:pressed{    \n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    background-color:rgba(105, 118, 132, 200);\n"
"}\n"
"\n"
"QPushButton#pushButton_2, #pushButton_3, #pushButton_4, #pushButton_5{    \n"
"    background-color: rgba(0, 0, 0, 0);\n"
"    color:rgba(85, 98, 112, 255);\n"
"}\n"
"QPushButton#pushButton_2:hover, #pushButton_3:hover, #pushButton_4:hover, #pushButton_5:hover{    \n"
"    color:rgba(155, 168, 182, 220);\n"
"}\n"
"QPushButton#pushButton_2:pressed, #pushButton_3:pressed, #pushButton_4:pressed, #pushButton_5:pressed{    \n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(115, 128, 142, 255);\n"
"}")
        self.widget.setObjectName("widget")
        self.mtnBack = QtWidgets.QLabel(self.widget)
        self.mtnBack.setGeometry(QtCore.QRect(30, 20, 341, 461))
        self.mtnBack.setStyleSheet("border-image: url(:/images/background.png);\n"
"border-radius:20px;")
        self.mtnBack.setText("")
        self.mtnBack.setObjectName("mtnBack")
        self.BackLayer = QtWidgets.QLabel(self.widget)
        self.BackLayer.setGeometry(QtCore.QRect(30, 20, 350, 500))
        self.BackLayer.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:0.715909, stop:0 rgba(0, 0, 0, 9), stop:0.375 rgba(0, 0, 0, 50), stop:0.835227 rgba(0, 0, 0, 75));\n"
"border-radius:20px;")
        self.BackLayer.setText("")
        self.BackLayer.setObjectName("BackLayer")
        self.LogInLayer = QtWidgets.QLabel(self.widget)
        self.LogInLayer.setGeometry(QtCore.QRect(40, 30, 321, 441))
        self.LogInLayer.setStyleSheet("background-color:rgba(0, 0, 0, 100);\n"
"border-radius:15px;")
        self.LogInLayer.setText("")
        self.LogInLayer.setObjectName("LogInLayer")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(90, 30, 261, 51))
        font = QtGui.QFont()
        font.setFamily("Cambria")
        font.setPointSize(23)
        font.setBold(False)
        font.setItalic(True)
        self.label.setFont(font)
        self.label.setStyleSheet("color:rgba(255, 255, 255, 210);")
        self.label.setObjectName("label")
        self.user_Signup = QtWidgets.QLineEdit(self.widget)
        self.user_Signup.setGeometry(QtCore.QRect(80, 150, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.user_Signup.setFont(font)
        self.user_Signup.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(105, 118, 132, 255);\n"
"color:rgba(255, 255, 255, 230);\n"
"padding-bottom:7px;")
        self.user_Signup.setObjectName("user_Signup")
        self.pass_Signup = QtWidgets.QLineEdit(self.widget)
        self.pass_Signup.setGeometry(QtCore.QRect(80, 190, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.pass_Signup.setFont(font)
        self.pass_Signup.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(105, 118, 132, 255);\n"
"color:rgba(255, 255, 255, 230);\n"
"padding-bottom:7px;")
        self.pass_Signup.setEchoMode(QtWidgets.QLineEdit.Password)
        self.pass_Signup.setObjectName("pass_Signup")
        self.label_6 = QtWidgets.QLabel(self.widget)
        self.label_6.setGeometry(QtCore.QRect(110, 60, 261, 51))
        font = QtGui.QFont()
        font.setFamily("Cambria")
        font.setPointSize(23)
        font.setBold(False)
        font.setItalic(True)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color:rgba(255, 255, 255, 210);")
        self.label_6.setObjectName("label_6")
        self.email_Signup = QtWidgets.QLineEdit(self.widget)
        self.email_Signup.setGeometry(QtCore.QRect(80, 230, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.email_Signup.setFont(font)
        self.email_Signup.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(105, 118, 132, 255);\n"
"color:rgba(255, 255, 255, 230);\n"
"padding-bottom:7px;")
        self.email_Signup.setObjectName("email_Signup")
        self.signupButton = QtWidgets.QPushButton(self.widget)
        self.signupButton.setGeometry(QtCore.QRect(100, 310, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(14)
        font.setBold(True)
        self.signupButton.setFont(font)
        self.signupButton.setObjectName("signupButton")

        self.signupButton.clicked.connect(self.signupFrame)            
        self.backButton = QtWidgets.QPushButton(self.widget)
        self.backButton.setGeometry(QtCore.QRect(100, 360, 200, 40))
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(14)
        font.setBold(True)
        self.backButton.setFont(font)
        self.backButton.setObjectName("backButton")
        self.backButton.clicked.connect(self.backFrame)

        qtRectangle = Signup.frameGeometry()
        centerPoint = QDesktopWidget().availableGeometry().center()
        qtRectangle.moveCenter(centerPoint)
        Signup.move(qtRectangle.topLeft())


        self.retranslateUi(Signup)
        QtCore.QMetaObject.connectSlotsByName(Signup)

    def backFrame(self):
        Signup.hide()
        Form.show()

    def signupFrame(self):
        global userSIGNUP
        global passSIGNUP
        global emailSIGNUP 

        userSIGNUP = self.user_Signup.text()
        passSIGNUP = self.pass_Signup.text()
        emailSIGNUP = self.email_Signup.text()
        print(userSIGNUP)

        insertDB();
        Signup.hide()
        Form.show();


    def retranslateUi(self, Signup):
        _translate = QtCore.QCoreApplication.translate
        Signup.setWindowTitle(_translate("Signup", "Form"))
        self.label.setText(_translate("Signup", "LIFETRACKER "))
        self.user_Signup.setPlaceholderText(_translate("Signup", "  User Name"))
        self.pass_Signup.setPlaceholderText(_translate("Signup", "  Password"))
        self.label_6.setText(_translate("Signup", "ALL IN ONE"))
        self.email_Signup.setPlaceholderText(_translate("Signup", "  E-Mail"))
        self.signupButton.setText(_translate("Signup", "SIGN UP"))
        self.backButton.setText(_translate("Signup", "BACK"))




class Ui_Widget(object):
    def setupUi(self, Widget):
        Widget.setObjectName("Widget")
        Widget.resize(450, 550)        
        font = QtGui.QFont()
        font.setFamily("Script MT Bold")
        font.setPointSize(24)
        font.setBold(True)
        Widget.setFont(font)
        self.label = QtWidgets.QLabel(Widget)


        qtRectangle = Widget.frameGeometry()
        centerPoint = QDesktopWidget().availableGeometry().center()
        qtRectangle.moveCenter(centerPoint)
        Widget.move(qtRectangle.topLeft())


    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle("LifeTracker AIO")
        self.label.setText(_translate("Widget", "LifeTracker AIO "))

    

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)  #Create the application
    Widget = QtWidgets.QWidget()            #Call to QtWidget
    
    Widget.move(50  , 30)
    Widget.setFixedWidth(1000)              #1000 pix
    #Widget.setFixedHeight(500)              #1000 pix
    Widget.setStyleSheet("background: #161219;")

    grid = QGridLayout()



class Ui_regForm(object):
    def setupUi(self, regForm):
        regForm.setObjectName("regForm")
        regForm.resize(912, 597)
        regForm.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        regForm.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.widget = QtWidgets.QWidget(regForm)
        self.widget.setGeometry(QtCore.QRect(30, 30, 550, 500))
        self.widget.setStyleSheet("QPushButton#pushButton, #pushButton_6{\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(11, 131, 120, 219), stop:1 rgba(85, 98, 112, 226));\n"
"    color:rgba(255, 255, 255, 210);\n"
"    border-radius:5px;\n"
"}\n"
"\n"
"QPushButton#pushButton:hover, #pushButton_6:hover{\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(150, 123, 111, 219), stop:1 rgba(85, 81, 84, 226));\n"
"}\n"
"\n"
"QPushButton#pushButton:pressed, #pushButton_6:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    background-color:rgba(150, 123, 111, 255);\n"
"}\n"
"\n"
"QPushButton#pushButton_2, #pushButton_3, #pushButton_4, #pushButton_5{\n"
"    background-color: rgba(0, 0, 0, 0);\n"
"    color:rgba(85, 98, 112, 255);\n"
"}\n"
"\n"
"QPushButton#pushButton_2:hover, #pushButton_3:hover, #pushButton_4:hover, #pushButton_5:hover{\n"
"    color: rgba(131, 96, 53, 255);\n"
"}\n"
"\n"
"QPushButton#pushButton_2:pressed, #pushButton_3:pressed, #pushButton_4:pressed, #pushButton_5:pressed{\n"
"    padding-left:5px;\n"
"    padding-top:5px;\n"
"    color:rgba(91, 88, 53, 255);\n"
"}\n"
"\n"
"")
        self.widget.setObjectName("widget")
        self.Background1 = QtWidgets.QLabel(self.widget)
        self.Background1.setGeometry(QtCore.QRect(40, 30, 280, 430))
        self.Background1.setStyleSheet("border-image: url(:/images/background2.jpg);\n"
"border-top-left-radius: 50px;")
        self.Background1.setText("")
        self.Background1.setObjectName("Background1")
        self.oceanbckground = QtWidgets.QLabel(self.widget)
        self.oceanbckground.setGeometry(QtCore.QRect(40, 30, 231, 431))
        self.oceanbckground.setStyleSheet("background-color:rgba(0, 0, 0, 80);\n"
"border-top-left-radius: 50px;")
        self.oceanbckground.setText("")
        self.oceanbckground.setObjectName("oceanbckground")
        self.Background2 = QtWidgets.QLabel(self.widget)
        self.Background2.setGeometry(QtCore.QRect(270, 30, 281, 431))
        self.Background2.setStyleSheet("background-color:rgba(255, 255, 255, 255);\n"
"border-bottom-right-radius: 50px;")
        self.Background2.setText("")
        self.Background2.setObjectName("Background2")
        self.widget_3 = QtWidgets.QWidget(self.widget)
        self.widget_3.setGeometry(QtCore.QRect(280, 50, 251, 371))
        self.widget_3.setObjectName("widget_3")
        self.Welcome = QtWidgets.QLabel(self.widget_3)
        self.Welcome.setGeometry(QtCore.QRect(50, 10, 161, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.Welcome.setFont(font)
        self.Welcome.setStyleSheet("color:rgba(0, 0, 0, 200);")
        self.Welcome.setObjectName("Welcome")
        self.FName = QtWidgets.QLineEdit(self.widget_3)
        self.FName.setGeometry(QtCore.QRect(10, 60, 101, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.FName.setFont(font)
        self.FName.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(46, 82, 101, 200);\n"
"color:rgba(0, 0, 0, 240);\n"
"padding-bottom:7px;")
        self.FName.setObjectName("FName")
        self.trackButton = QtWidgets.QPushButton(self.widget_3)
        self.trackButton.setGeometry(QtCore.QRect(30, 210, 190, 40))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        self.trackButton.setFont(font)
        self.trackButton.setObjectName("trackButton")
        self.LName = QtWidgets.QLineEdit(self.widget_3)
        self.LName.setGeometry(QtCore.QRect(120, 60, 121, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.LName.setFont(font)
        self.LName.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(46, 82, 101, 200);\n"
"color:rgba(0, 0, 0, 240);\n"
"padding-bottom:7px;")
        self.LName.setObjectName("LName")
        self.Workout = QtWidgets.QLineEdit(self.widget_3)
        self.Workout.setGeometry(QtCore.QRect(120, 110, 121, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Workout.setFont(font)
        self.Workout.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(46, 82, 101, 200);\n"
"color:rgba(0, 0, 0, 240);\n"
"padding-bottom:7px;")
        self.Workout.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.Workout.setObjectName("Workout")
        self.Age = QtWidgets.QLineEdit(self.widget_3)
        self.Age.setGeometry(QtCore.QRect(10, 110, 101, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Age.setFont(font)
        self.Age.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(46, 82, 101, 200);\n"
"color:rgba(0, 0, 0, 240);\n"
"padding-bottom:7px;")
        self.Age.setText("")
        self.Age.setObjectName("Age")
        self.SleepGoal = QtWidgets.QLineEdit(self.widget_3)
        self.SleepGoal.setGeometry(QtCore.QRect(10, 160, 101, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.SleepGoal.setFont(font)
        self.SleepGoal.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(46, 82, 101, 200);\n"
"color:rgba(0, 0, 0, 240);\n"
"padding-bottom:7px;")
        self.SleepGoal.setText("")
        self.SleepGoal.setObjectName("SleepGoal")
        self.CalorieGoal = QtWidgets.QLineEdit(self.widget_3)
        self.CalorieGoal.setGeometry(QtCore.QRect(120, 160, 121, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.CalorieGoal.setFont(font)
        self.CalorieGoal.setStyleSheet("background-color:rgba(0, 0, 0, 0);\n"
"border:none;\n"
"border-bottom:2px solid rgba(46, 82, 101, 200);\n"
"color:rgba(0, 0, 0, 240);\n"
"padding-bottom:7px;")
        self.CalorieGoal.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.CalorieGoal.setObjectName("CalorieGoal")
        self.logo = QtWidgets.QLabel(self.widget_3)
        self.logo.setGeometry(QtCore.QRect(0, 260, 251, 131))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap("logo.png"))
        self.logo.setScaledContents(True)
        self.logo.setObjectName("logo")
        self.widget_2 = QtWidgets.QWidget(regForm)
        self.widget_2.setGeometry(QtCore.QRect(600, 60, 220, 315))
        self.widget_2.setObjectName("widget_2")

        self.retranslateUi(regForm)
        QtCore.QMetaObject.connectSlotsByName(regForm)

        self.trackButton.clicked.connect(self.enterDBInfo)




    def retranslateUi(self, regForm):
        _translate = QtCore.QCoreApplication.translate
        regForm.setWindowTitle(_translate("regForm", "Form"))
        self.Welcome.setText(_translate("regForm", "Welcome"))
        self.FName.setPlaceholderText(_translate("regForm", "  First Name"))
        self.trackButton.setText(_translate("regForm", "Track"))
        self.LName.setPlaceholderText(_translate("regForm", "  Last Name"))
        self.Workout.setPlaceholderText(_translate("regForm", " Workout Goal"))
        self.Age.setPlaceholderText(_translate("regForm", "  Age "))
        self.SleepGoal.setPlaceholderText(_translate("regForm", "  Sleep Goal"))
        self.CalorieGoal.setPlaceholderText(_translate("regForm", " Calorie Goal"))



    def enterDBInfo(self):
        global NameEntry
        global LNameEntry
        global AgeEntry
        global WorkEntry
        global CalEntry
        global SleepEntry

        NameEntry = self.FName.text()
        NameEntry = self.FName.text()
        LNameEntry = self.LName.text()
        AgeEntry = self.Age.text()
        WorkEntry = self.Workout.text()
        SleepEntry = self.SleepGoal.text()
        CalEntry =  self.CalorieGoal.text()

        enterUserInfo()
             




def clear_widgets():
    ''' hide all existing widgets and erase
        them from the global dictionary'''
    for widget in widgets:
        if widgets[widget] != []:
            widgets[widget][-1].hide()
        for i in range(0, len(widgets[widget])):
            widgets[widget].pop()


def show_frame1():
    clear_widgets()
    frame1()


def demo_frame():
    clear_widgets()
    frame2()

def result_frame():
    clear_widgets()
    frame3()


def frame1():
    #display logo
    image = QPixmap("logo.png")             #define logo variable
    logo = QLabel()                         #define logo as a Label
    logo.setPixmap(image)                   #set  logo object to image'
    logo.setAlignment(QtCore.Qt.AlignCenter)
    logo.setStyleSheet("margin-top: 25px;")
    widgets["logo"].append(logo) 

    #Track Button
    button = QPushButton ("TRACK")
    button.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    button.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 45px;" + 
        "font-size: 35px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )

    widgets["button"].append(button) 
    button.clicked.connect(trackFrame)

    #Demonstrate Button
    demoButton = QPushButton ("DEMONSTRATE")
    demoButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    demoButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 45px;" + 
        "font-size: 35px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    demoButton.clicked.connect(demo_frame)
    widgets["demo"].append(demoButton) 

    grid.addWidget(widgets["logo"][-1],0,0,1,3)                #set grid
    grid.addWidget(widgets["button"][-1], 1, 0,1,3)
    grid.addWidget(widgets["demo"][-1], 2, 0,1,3)

def frame2(): #Demonastration frame 
    goalLabel = QLabel("Simulation")
    goalLabel.setAlignment(QtCore.Qt.AlignCenter)
    goalLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
    widgets["goals"].append(goalLabel)

    yearsLabel = QLabel("YEARS")
    yearsLabel.setAlignment(QtCore.Qt.AlignLeft)
    yearsLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["years"].append(yearsLabel)

    calorieLabel = QLabel("CALORIES")
    calorieLabel.setAlignment(QtCore.Qt.AlignLeft)
    calorieLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["calorie"].append(calorieLabel)

    workLabel = QLabel("WORKOUT")
    workLabel.setAlignment(QtCore.Qt.AlignLeft)
    workLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["work"].append(workLabel)

    sleepLabel = QLabel("SLEEP")
    sleepLabel.setAlignment(QtCore.Qt.AlignLeft)
    sleepLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["sleep"].append(sleepLabel)    

    yearsInput = QLineEdit("1")
    yearsInput.setAlignment(QtCore.Qt.AlignCenter)
    yearsInput.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" +
        "padding: 25px;" 
    )

    widgets["yearsInput"].append(yearsInput) 

    calorieInput = QLineEdit(CalEntry)
    calorieInput.setAlignment(QtCore.Qt.AlignCenter)
    calorieInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )

    widgets["calorieInput"].append(calorieInput)

    workInput = QLineEdit(WorkEntry)
    workInput.setAlignment(QtCore.Qt.AlignCenter)
    workInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )

    widgets["workInput"].append(workInput)

    sleepInput = QLineEdit(SleepEntry)
    sleepInput.setAlignment(QtCore.Qt.AlignCenter)
    sleepInput.setStyleSheet(
    "font-size: 24px;" +
    "color: 'white';" +
    "padding: 25px;" 
    )

    widgets["sleepInput"].append(sleepInput)    

    tempLabel = QLabel("")
    tempLabel.setAlignment(QtCore.Qt.AlignCenter)
    tempLabel.setStyleSheet(
    "margin: 5px 100px;"
    )

    widgets["temp"].append(tempLabel)

    demoButton2 = QPushButton ("DEMONSTRATE")
    demoButton2.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    demoButton2.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 45px;" + 
        "font-size: 35px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    widgets["demo2"].append(demoButton2)

    #Back Button
    backButton = QPushButton ("Back")
    backButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    backButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    backButton.clicked.connect(show_frame1)
    widgets["backButton"].append(backButton)
    grid.addWidget(widgets["backButton"][-1], 0, 0, 1,1)

    grid.addWidget(widgets["goals"][-1], 0, 1, 1,1)
    grid.addWidget(widgets["years"][-1], 1, 0,1,1)
    grid.addWidget(widgets["yearsInput"][-1], 1, 1,1,1) 
    grid.addWidget(widgets["calorie"][-1], 2, 0,1,1)
    grid.addWidget(widgets["calorieInput"][-1], 2, 1,1,1) 
    grid.addWidget(widgets["work"][-1], 3, 0,1,1)    
    grid.addWidget(widgets["workInput"][-1], 3, 1,1,1) 
    grid.addWidget(widgets["sleep"][-1], 4, 0,1,1)        
    grid.addWidget(widgets["sleepInput"][-1], 4, 1,1,1) 
    grid.addWidget(widgets["demo2"][-1], 5, 1,1,1)     

    grid.addWidget(widgets["temp"][-1], 1, 2,1,1) 

    #yearsString = yearsInput.text() 

    def calculate():

        years = int(yearsInput.text())
        calories = Decimal(calorieInput.text())
        workout = Decimal(workInput.text())
        sleep = Decimal(sleepInput.text())

        class Person(object):

            years = int(yearsInput.text())
            calories = Decimal(calorieInput.text())
            workout = Decimal(workInput.text())
            sleep = Decimal(sleepInput.text())

            def __init__(self, years, calories, workout, sleep):
                self.years = years
                self.calories = calories
                self.workout = workout
                self.sleep = sleep


        global days
        days  = years * 365      
        global dataArray
        dataArray = [] 
        mycursor = db.cursor()
        value = int(text)
        #mycursor.execute("INSERT INTO udata(id) VALUES (%s)",(value,))
        user = Person(0,0,0,0)
        start = time.time()
        for x in range(days):
           dataArray.append(Person(x,0,0,0))

        index = 0
        for x in dataArray:
            dataArray[index].calories = random.randint(calories - 200, calories + 200)
            dataArray[index].workout = random.randint(workout - 15, workout + 15)
            dataArray[index].sleep = random.randint(sleep - 2, sleep + 2)

            mycursor = db.cursor()
            mycursor.execute("INSERT INTO udata(id,workouts,calories,sleep) VALUES (%s,%s,%s,%s)",(value,dataArray[index].workout,dataArray[index].calories,dataArray[index].sleep))

            index = index + 1

            db.commit()

        end = time.time()

        findOptimalDays()
        global generateElapsed
        generateElapsed = ( round(end, 5) - round(start, 5) ) 
        generateElapsed = "{:.5f}".format(generateElapsed)
        index = 0

        global minElapsed
        global minCalories 
        global minWorkout 
        global minSleep 

        minCalories = dataArray[index].calories
        minWorkout = dataArray[index].workout
        minSleep = dataArray[index].sleep
        start = time.time()
        for x in dataArray:
            
            tempCalories = dataArray[index].calories
            tempWorkout = dataArray[index].workout
            tempSleep = dataArray[index].sleep

            if tempCalories < minCalories:
                minCalories = tempCalories
            if tempWorkout < minWorkout:
                minWorkout = tempWorkout
            if tempSleep < minSleep:
                minSleep = tempSleep
            index = index + 1 
        end = time.time()
        minElapsed = end - start
        minElapsed = ( round(end, 5) - round(start, 5) ) 
        minElapsed = "{:.5f}".format(minElapsed)




        index = 0
        global maxElapsed
        global maxCalories 
        global maxWorkout 
        global maxSleep 
#Find maximums 
        for x in dataArray:
            
            tempCalories = dataArray[index].calories
            tempWorkout = dataArray[index].workout
            tempSleep = dataArray[index].sleep

            if tempCalories > maxCalories:
                maxCalories = tempCalories
            if tempWorkout > maxWorkout:
                maxWorkout = tempWorkout
            if tempSleep > maxSleep:
                maxSleep = tempSleep
            index = index + 1 

        maxElapsed = end - start
        maxElapsed = ( round(end, 5) - round(start, 5) ) 
        maxElapsed = "{:.5f}".format(maxElapsed)

        def insertionSort(dataArray):
            start = time.time()
            # Traverse through 1 to len(arr)
            for i in range(1, len(dataArray)):
          
                key = dataArray[i].calories
          
                # Move elements of arr[0..i-1], that are
                # greater than key, to one position ahead
                # of their current position
                j = i-1
                while j >=0 and key < dataArray[j].calories :
                        dataArray[j+1].calories = dataArray[j].calories
                        j -= 1
                dataArray[j+1].calories = key
            end = time.time()
            print("Elapsed Sorting Time: ",end - start)

        clear_widgets()
        result_frame()
    demoButton2.clicked.connect(calculate)

def findOptimalDays():
    result_queue = []
    mycursor = db.cursor()
    mycursor.execute("SELECT * FROM udata WHERE  workouts = %s AND calories = %s AND sleep = %s",(WorkEntry,CalEntry,SleepEntry))
    myresults = mycursor.fetchall()
    for row in myresults:
            for x in row:
                result_queue.append(x)

    print(result_queue)



def frame3(): #Simulation Result Frame
    simulationLabel = QLabel("Simulation Results")
    simulationLabel.setAlignment(QtCore.Qt.AlignCenter)
    simulationLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )


    daysLabel = QLabel("Days Generated: ")
    daysLabel.setAlignment(QtCore.Qt.AlignLeft)
    daysLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    minmaxCalLabel = QLabel("Min and Max Calories:")
    minmaxCalLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxCalLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    minmaxWorkLabel = QLabel("Min and Max Workouts:")
    minmaxWorkLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxWorkLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
    minmaxSleepLabel = QLabel("Min and Max Sleep:")
    minmaxSleepLabel.setAlignment(QtCore.Qt.AlignLeft)
    minmaxSleepLabel.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

#/////////////////////////////#
    daysLabelValue = QLabel()
    daysLabelValue.setText(str(days))
    daysLabelValue.setAlignment(QtCore.Qt.AlignLeft)
    daysLabelValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    bothCalories = str(minCalories) + " and " + str(maxCalories) + " Calories"

    minmaxCalValue = QLabel()
    minmaxCalValue.setText(bothCalories)
    minmaxCalValue.setAlignment(QtCore.Qt.AlignLeft)
    minmaxCalValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    bothWork = str(minWorkout) + " and " + str(maxWorkout) + " Minutes"

    minmaxWorkValue = QLabel()
    minmaxWorkValue.setText(bothWork)
    minmaxWorkValue.setAlignment(QtCore.Qt.AlignLeft)
    minmaxWorkValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    bothSleep = str(minSleep) + " and " + str(maxSleep) + " Hours"

    minmaxSleepValue = QLabel()
    minmaxSleepValue.setText(str(bothSleep))
    minmaxSleepValue.setAlignment(QtCore.Qt.AlignLeft)
    minmaxSleepValue.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    
#/////////////////////////////#

    daysElapsed = QLabel()
    daysElapsed.setText(str(generateElapsed) + " seconds")
    daysElapsed.setAlignment(QtCore.Qt.AlignLeft)
    daysElapsed.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    minElapsedCalculated = QLabel()
    minElapsedCalculated.setText(str(str(minElapsed) + " seconds"))
    minElapsedCalculated.setAlignment(QtCore.Qt.AlignLeft)
    minElapsedCalculated.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    maxElapsedCalculated = QLabel()
    maxElapsedCalculated.setText(str(str(minElapsed) + " seconds"))
    maxElapsedCalculated.setAlignment(QtCore.Qt.AlignLeft)
    maxElapsedCalculated.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    max2ElapsedCalculated = QLabel()
    max2ElapsedCalculated.setText(str(str(minElapsed) + " seconds"))
    max2ElapsedCalculated.setAlignment(QtCore.Qt.AlignLeft)
    max2ElapsedCalculated.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )

    ElapsedTime = QLabel("Elapsed Time ")
    ElapsedTime.setAlignment(QtCore.Qt.AlignCenter)
    ElapsedTime.setStyleSheet(
        "font-size: 24px;" +
        "color: 'white';" 
    )
    widgets["temp"].append(ElapsedTime)
    grid.addWidget(widgets["temp"][-1], 0, 2, 1,1)


    #Back Button
    backButton = QPushButton ("Back")
    backButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    backButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    backButton.clicked.connect(demo_frame)

    widgets["backButton"].append(backButton)
    grid.addWidget(widgets["backButton"][-1], 0, 0, 1,1)

    buildHeapButton = QPushButton ("LOG DATA")
    buildHeapButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
    buildHeapButton.setStyleSheet(
        "*{border: 4px solid '#BC006C';" +
        "border-radius: 35px;" + 
        "font-size: 25px;" +
        "color: 'white';" +
        "padding: 25px 0;" +
        "margin: 5px 20px;}" + 
        "*:hover{background:'#BC006C';}"
    )
    buildHeapButton.clicked.connect(log)

    widgets["buildHeapButton"].append(buildHeapButton)
    grid.addWidget(widgets["buildHeapButton"][-1], 5, 0, 1,1)

    widgets["Simulation"].append(simulationLabel)
    widgets["daysGenerated"].append(daysLabel)
    widgets["minmaxCal"].append(minmaxCalLabel)
    widgets["minmaxWork"].append(minmaxWorkLabel)
    widgets["minmaxSleep"].append(minmaxSleepLabel)

    widgets["daysGenValue"].append(daysLabelValue)
    widgets["maxCal"].append(minmaxCalValue)
    widgets["maxSleep"].append(minmaxSleepValue)
    widgets["maxWork"].append(minmaxWorkValue)

    widgets["generateElapsed"].append(daysElapsed)
    widgets["minElapsedCalculated"].append(minElapsedCalculated)
    widgets["maxElapsedCalculated"].append(maxElapsedCalculated)
    widgets["max2ElapsedCalculated"].append(max2ElapsedCalculated)


    grid.addWidget(widgets["Simulation"][-1], 0, 1, 1,1)
    grid.addWidget(widgets["daysGenerated"][-1], 1, 0,1,2)
    grid.addWidget(widgets["minmaxCal"][-1], 2, 0,1,1)
    grid.addWidget(widgets["minmaxWork"][-1], 3, 0,1,1)    
    grid.addWidget(widgets["minmaxSleep"][-1], 4, 0,1,1)    

    grid.addWidget(widgets["daysGenValue"][-1], 1, 1,1,1)
    grid.addWidget(widgets["maxCal"][-1], 2, 1,1,1)
    grid.addWidget(widgets["maxWork"][-1], 3, 1,1,1)  
    grid.addWidget(widgets["maxSleep"][-1], 4, 1,1,1) 

    grid.addWidget(widgets["generateElapsed"]     [-1], 1, 2,1,1)
    grid.addWidget(widgets["maxElapsedCalculated"]     [-1], 2, 2,1,1)
    grid.addWidget(widgets["minElapsedCalculated"]     [-1], 3, 2,1,1)
    grid.addWidget(widgets["max2ElapsedCalculated"]     [-1], 4, 2,1,1)


#////////////////////////////////////////////////////////#

def log():
    clear_widgets()
    

 

def trackFrame():
    Widget.hide()
    clear_widgets()
    loginInitialize()

def user():
    clear_widgets()

def login():
    clear_widgets()

def signup():
    clear_widgets()

def loginInitialize():
    Form.show()




frame1()
ui = Ui_Widget()                        #Util
ui.setupUi(Widget)                      #Util
Widget.show()                           #Util


Widget.setLayout(grid)


Form = QtWidgets.QWidget()
uiForm = Ui_Form()
uiForm.setupUi(Form)

Signup = QtWidgets.QWidget()
uiSignup = Ui_Signup()
uiSignup.setupUi(Signup)

regForm = QtWidgets.QWidget()
uiReg = Ui_regForm()
uiReg.setupUi(regForm)



import mysql.connector

db = mysql.connector.connect(
    host = "localhost",
    user = "root",
    password = "root",
    database = "user"
    )

def insertDB():
    mycursor = db.cursor()
    mycursor.execute("INSERT INTO ulogin(username,password,email) VALUES (%s,%s,%s)",(userSIGNUP,passSIGNUP,emailSIGNUP))
    db.commit()
    print("done")
    #print (userSIGNUP)

text = ""
def accessDB():
    mycursor = db.cursor()
    #query = 'SELECT password FROM ulogin WHERE username =\''+user+"\'"
    #query = "SELECT username,password from ulogin where username like'" +username + "'+ and password like '" + password + ""

    mypassword_queue =[]

    global credentials
    dbUser = userLOGIN
    dbPass = passLOGIN
    print (dbUser)
    #mycursor.execute("SELECT * FROM ulogin WHERE username = '%s' AND password = '%s'" % (dbUser,dbPass))

    global getkey
    global key
    global text
    try:
        mycursor.execute("SELECT * FROM ulogin WHERE username = '%s' AND password = '%s'" % (dbUser,dbPass))
        myresults =mycursor.fetchall()
        for row in myresults:
            for x in row:
                mypassword_queue.append(x)
    except:
        print('error occured')
    if (dbUser and dbPass) in mypassword_queue:
        print(mypassword_queue)
        print(dbUser,dbPass)
        print('there is something')
        mycursor.execute("SELECT userID FROM ulogin WHERE username = '%s' AND password = '%s'" % (dbUser,dbPass))
        #ycursor.execute("SELECT STRING_AGG (userID) AS userID FROM ulogin")
       	getkey = mycursor.fetchall()

        text = format(getkey[0])
        print(text)
        text = convertTuple(text)
        print(text)
        text = ''.join((text))
        #print(getkey)
        print(text)
        text = text.replace("(","").replace(")","")
        print(text)
        text = text.replace(',',"")
        
        ifEntryExists()
        credentials = 0 


    else:
        credentials = 1
        #print(credentials)

def convertTuple(tup):
        # initialize an empty string
    str = ''
    for item in tup:
        str = str + item
    return str

def ifEntryExists():
    key_queue =[]
    mycursor = db.cursor(buffered=True)
    mycursor.execute("SELECT userkey FROM uinfo WHERE userkey = '%s'" % (text))
    myresults =mycursor.fetchall()
    for row in myresults:
            for x in row:
                key_queue.append(x)
    print(text)
    if int(text) in key_queue:
        print("You have something")
        Form.hide()
        Widget.show()
        frame2()
    else:
        takeinfo()

    

def enterUserInfo():
    #mycursor = db.cursor()

    mycursor = db.cursor(buffered=True)
    #last_id = mycursor.lastrowid
    print(text)

    mycursor.execute("INSERT INTO uinfo(userkey,firstname,lastname,age,workoutGoal,caloriesGoal,sleepGoal) VALUES (%s,%s,%s,%s,%s,%s,%s)",(text,NameEntry,LNameEntry,AgeEntry,WorkEntry,CalEntry,SleepEntry))
    
    db.commit()
    regForm.hide()
    Widget.show()
    frame2()



def takeinfo():
    print("Hi")
    Form.hide()
    regForm.show()






sys.exit(app.exec_())
